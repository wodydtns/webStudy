package kr.or.ddit.io;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;

import kr.or.ddit.vo.TestVO;

/**
 * Stream : 데이터의 흐름, 데이터가 오고가는 단방향 통로
 * 데이터 출처(source)로부터 데이터 입력
 * 1. 데이터의 출처인 매체를 어플리케이션에서 제어할 수 있는 형태로 객체를 생성
 * ex) new File(fileSystemPath)
 * 2. 매체를 대상으로 단방향 stream 개방
 * ex) FileInputStream(byte단위 stream) / FileReader(문자단위 stream)
 * 	   FileoutputStream(byte단위 stream) / FileWriter(문자단위 stream)
 * 3. read 계열의 오버로딩 메소드 사용 - EoF를 만날때까지
 * 		-> pointer를 이동시키면서 읽어들임
 * 4. 자원을 release -> close() 메소드 - 파일을 읽을때는 하나의 쓰레드씩만 읽을 수 있도록 lock을 한다 -> close()는 락을 풀어주는 것
 * 		-> finally 구문 실행
 * 
 * Steam의 종류
 * 	:전송 데이터 크기에 따라 byteStream(XXXInputStream,XXXOutputStream)-1byte씩 / character Stream(XXXReader/Writer)-2byte씩
 * 1. 1차 스트림(단일형 스트림) : 매체에 직접적으로 접근할 수 있는 스트림
 * 		FileInputStream,ByteArrayInputStream, SocketInputStream
 * 		FileReader, StringReader
 * 2. 2차 스트림(연결형 보조스트림) : 1차 스트림에 의존해서 매체에 접근할 수 있는 스트림
 * 		1)Buffer Stream
 * 			- InputStreamReader, BufferedReader
 *      2)Filter Stream
 *      	- DataInputStream /OutputStream
 *      3)Object Stream : 객체 직렬화에 사용된다.
 *  
 * 직렬화(serialization) : 객체(implements Serailizable)의 상태를 매체가 기록하거나 전송하기 위해 바이트 배열의 형태로 바꾸는 작업
 * 역직렬화(Deserialization) : 매체로부터 읽어들인 바이트 배열을 원래의 객체 형태로 복원하는 작업
 * 어떤 파일을 직렬화 할 것인가 하지 말것인가를 선택해야함
 *      	
 * @author pc04
 *
 */
public class StreamDesc {
	public static void main(String[] args) {
		//1.anotherday.txt 파일 읽기
		//byteStreamCopy();
		
//		2.lovepoem - utf-8로 encoding된 파일 읽기
//		charStreamCopy_utf8();
		
//		3. lovepoem - ms949 - 1.8버전에서는 기본 encoding방식이 utf-8 - 실행할 경우 문자가 깨진다
//		charStreamCopy();
		TestVO vo1 = new TestVO();
		vo1.setNumber(34);
		vo1.setDblNumber(3.4);
		vo1.setTestArray(new byte[] {1,2,3});
	}

		
	

	private static void byteStreamCopy() {
		String fileSystemPath = StreamDesc.class.getResource("./anotherday.txt").getFile(); //URL을 리턴 -> file system 형태로 바꾸어야함
		File readFile = new File(fileSystemPath); // classpath resource을 넣어야함
		File writerFile = new File("d:/anotherday.txt");
		//java 1.7버전부터 try~with~resource 구문 활용 가능
		
		//2. 매체에 맞는 스트림 개방
		//Closable 객체 생성 코드, close구문 생략 가능
		byte[] buffer = new byte[1024];
		int length = -1;
		try (
				FileInputStream fis = new FileInputStream(readFile); // 이미 fis,fos가 close 된 상태
				FileOutputStream fos = new FileOutputStream(writerFile);
		){
			while((length = fis.read(buffer))!=-1) {
				fos.write(buffer,0,length);
			}
		}catch(IOException e) {
			e.printStackTrace();
		}		
	}

	private static void charStreamCopy_utf8() {
		String fsp = StreamDesc.class.getResource("lovepoem_utf8.txt").getFile();
		File readFile = new File(fsp);
		File writeFile = new File("d:/lovepoem_utf8.txt");
//		char[] buffer = new char[512]; // 유니코드를 사용해야함 - 2바이트씩 써야하므로 -> reader를 사용
		int length = -1;
		String line = null;
		try(
			FileReader fr = new FileReader(readFile);
			BufferedReader br = new BufferedReader(fr); // buffer를 사용하므로 char[] buffer는 불필요 /읽기 위한 2차 스트림
			FileWriter fw = new FileWriter(writeFile);
			BufferedWriter bw = new BufferedWriter(fw); // 쓰기 위한 2차 스트림
		){
//			while((length = fr.read(buffer)) != -1) {
//				fw.write(buffer,0,length); // length는 pointer
				
//			}
			while((line = br.readLine()) != null) {
				System.out.println(line);
				bw.write(line);
			}
		}catch(IOException e) {
			e.printStackTrace();
		
		}
	}
	private static void chatStreamCopy() {
		String fsp = StreamDesc.class.getResource("lovepoem.txt").getFile();
		File readFile = new File(fsp);
		File writeFile = new File("d:/lovepoem.txt");
//		char[] buffer = new char[512]; // 유니코드를 사용해야함 - 2바이트씩 써야하므로 -> reader를 사용
		int length = -1;
		String line = null;
		try(
			FileInputStream fis = new FileInputStream(readFile); // ms949 방식 -> 1byte씩 읽어야함
				InputStreamReader isr = new InputStreamReader(fis,"MS949"); // charset을 설정 해준다
			BufferedReader br = new BufferedReader(isr); // buffer를 사용하므로 char[] buffer는 불필요 /읽기 위한 2차 스트림
			FileWriter fw = new FileWriter(writeFile);
			BufferedWriter bw = new BufferedWriter(fw); // 쓰기 위한 2차 스트림
		){
//			while((length = fr.read(buffer)) != -1) {
//				fw.write(buffer,0,length); // length는 pointer
				
//			}
			while((line = br.readLine()) != null) {
				System.out.println(line);
				bw.write(line);
			}
		}catch(IOException e) {
			e.printStackTrace();
		
		}
	}
}
